package tls_test

import (
	"encoding/hex"
	"testing"

	"github.com/v2fly/v2ray-core/v4/common"
	. "github.com/v2fly/v2ray-core/v4/common/protocol/tls"
)

func TestTLSHeaders(t *testing.T) {
	cases := []struct {
		input  []byte
		domain string
		err    bool
	}{
		{
			input: []byte{
				0x16, 0x03, 0x01, 0x00, 0xc8, 0x01, 0x00, 0x00,
				0xc4, 0x03, 0x03, 0x1a, 0xac, 0xb2, 0xa8, 0xfe,
				0xb4, 0x96, 0x04, 0x5b, 0xca, 0xf7, 0xc1, 0xf4,
				0x2e, 0x53, 0x24, 0x6e, 0x34, 0x0c, 0x58, 0x36,
				0x71, 0x97, 0x59, 0xe9, 0x41, 0x66, 0xe2, 0x43,
				0xa0, 0x13, 0xb6, 0x00, 0x00, 0x20, 0x1a, 0x1a,
				0xc0, 0x2b, 0xc0, 0x2f, 0xc0, 0x2c, 0xc0, 0x30,
				0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0x14, 0xcc, 0x13,
				0xc0, 0x13, 0xc0, 0x14, 0x00, 0x9c, 0x00, 0x9d,
				0x00, 0x2f, 0x00, 0x35, 0x00, 0x0a, 0x01, 0x00,
				0x00, 0x7b, 0xba, 0xba, 0x00, 0x00, 0xff, 0x01,
				0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00,
				0x14, 0x00, 0x00, 0x11, 0x63, 0x2e, 0x73, 0x2d,
				0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
				0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x17, 0x00,
				0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0d, 0x00,
				0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04,
				0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01, 0x08,
				0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x05, 0x00,
				0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
				0x00, 0x00, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x0c,
				0x02, 0x68, 0x32, 0x08, 0x68, 0x74, 0x74, 0x70,
				0x2f, 0x31, 0x2e, 0x31, 0x00, 0x0b, 0x00, 0x02,
				0x01, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08,
				0xaa, 0xaa, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18,
				0xaa, 0xaa, 0x00, 0x01, 0x00,
			},
			domain: "c.s-microsoft.com",
			err:    false,
		},
		{
			input: []byte{
				0x16, 0x03, 0x01, 0x00, 0xee, 0x01, 0x00, 0x00,
				0xea, 0x03, 0x03, 0xe7, 0x91, 0x9e, 0x93, 0xca,
				0x78, 0x1b, 0x3c, 0xe0, 0x65, 0x25, 0x58, 0xb5,
				0x93, 0xe1, 0x0f, 0x85, 0xec, 0x9a, 0x66, 0x8e,
				0x61, 0x82, 0x88, 0xc8, 0xfc, 0xae, 0x1e, 0xca,
				0xd7, 0xa5, 0x63, 0x20, 0xbd, 0x1c, 0x00, 0x00,
				0x8b, 0xee, 0x09, 0xe3, 0x47, 0x6a, 0x0e, 0x74,
				0xb0, 0xbc, 0xa3, 0x02, 0xa7, 0x35, 0xe8, 0x85,
				0x70, 0x7c, 0x7a, 0xf0, 0x00, 0xdf, 0x4a, 0xea,
				0x87, 0x01, 0x14, 0x91, 0x00, 0x20, 0xea, 0xea,
				0xc0, 0x2b, 0xc0, 0x2f, 0xc0, 0x2c, 0xc0, 0x30,
				0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0x14, 0xcc, 0x13,
				0xc0, 0x13, 0xc0, 0x14, 0x00, 0x9c, 0x00, 0x9d,
				0x00, 0x2f, 0x00, 0x35, 0x00, 0x0a, 0x01, 0x00,
				0x00, 0x81, 0x9a, 0x9a, 0x00, 0x00, 0xff, 0x01,
				0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
				0x16, 0x00, 0x00, 0x13, 0x77, 0x77, 0x77, 0x30,
				0x37, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x74,
				0x61, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x00,
				0x17, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
				0x0d, 0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08,
				0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x05, 0x05,
				0x01, 0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00,
				0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x12, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0e,
				0x00, 0x0c, 0x02, 0x68, 0x32, 0x08, 0x68, 0x74,
				0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x75, 0x50,
				0x00, 0x00, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00,
				0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08, 0x9a, 0x9a,
				0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x8a, 0x8a,
				0x00, 0x01, 0x00,
			},
			domain: "www07.clicktale.net",
			err:    false,
		},
		{
			input: []byte{
				0x16, 0x03, 0x01, 0x00, 0xe6, 0x01, 0x00, 0x00, 0xe2, 0x03, 0x03, 0x81, 0x47, 0xc1,
				0x66, 0xd5, 0x1b, 0xfa, 0x4b, 0xb5, 0xe0, 0x2a, 0xe1, 0xa7, 0x87, 0x13, 0x1d, 0x11, 0xaa, 0xc6,
				0xce, 0xfc, 0x7f, 0xab, 0x94, 0xc8, 0x62, 0xad, 0xc8, 0xab, 0x0c, 0xdd, 0xcb, 0x20, 0x6f, 0x9d,
				0x07, 0xf1, 0x95, 0x3e, 0x99, 0xd8, 0xf3, 0x6d, 0x97, 0xee, 0x19, 0x0b, 0x06, 0x1b, 0xf4, 0x84,
				0x0b, 0xb6, 0x8f, 0xcc, 0xde, 0xe2, 0xd0, 0x2d, 0x6b, 0x0c, 0x1f, 0x52, 0x53, 0x13, 0x00, 0x08,
				0x13, 0x02, 0x13, 0x03, 0x13, 0x01, 0x00, 0xff, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0c,
				0x00, 0x0a, 0x00, 0x00, 0x07, 0x64, 0x6f, 0x67, 0x66, 0x69, 0x73, 0x68, 0x00, 0x0b, 0x00, 0x04,
				0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x1e,
				0x00, 0x19, 0x00, 0x18, 0x00, 0x23, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
				0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x07, 0x08, 0x08,
				0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01,
				0x06, 0x01, 0x00, 0x2b, 0x00, 0x07, 0x06, 0x7f, 0x1c, 0x7f, 0x1b, 0x7f, 0x1a, 0x00, 0x2d, 0x00,
				0x02, 0x01, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x2f, 0x35, 0x0c,
				0xb6, 0x90, 0x0a, 0xb7, 0xd5, 0xc4, 0x1b, 0x2f, 0x60, 0xaa, 0x56, 0x7b, 0x3f, 0x71, 0xc8, 0x01,
				0x7e, 0x86, 0xd3, 0xb7, 0x0c, 0x29, 0x1a, 0x9e, 0x5b, 0x38, 0x3f, 0x01, 0x72,
			},
			domain: "dogfish",
			err:    false,
		},
		{
			input: []byte{
				0x16, 0x03, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00,
				0xff, 0x03, 0x03, 0x3d, 0x89, 0x52, 0x9e, 0xee,
				0xbe, 0x17, 0x63, 0x75, 0xef, 0x29, 0xbd, 0x14,
				0x6a, 0x49, 0xe0, 0x2c, 0x37, 0x57, 0x71, 0x62,
				0x82, 0x44, 0x94, 0x8f, 0x6e, 0x94, 0x08, 0x45,
				0x7f, 0xdb, 0xc1, 0x00, 0x00, 0x3e, 0xc0, 0x2c,
				0xc0, 0x30, 0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8,
				0xcc, 0xaa, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e,
				0xc0, 0x24, 0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23,
				0xc0, 0x27, 0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14,
				0x00, 0x39, 0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33,
				0x00, 0x9d, 0x00, 0x9c, 0x13, 0x02, 0x13, 0x03,
				0x13, 0x01, 0x00, 0x3d, 0x00, 0x3c, 0x00, 0x35,
				0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x00, 0x98,
				0x00, 0x00, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00,
				0x0b, 0x31, 0x30, 0x2e, 0x34, 0x32, 0x2e, 0x30,
				0x2e, 0x32, 0x34, 0x33, 0x00, 0x0b, 0x00, 0x04,
				0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x0a,
				0x00, 0x08, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x19,
				0x00, 0x18, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0d,
				0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03,
				0x06, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06,
				0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x03,
				0x02, 0x01, 0x02, 0x02, 0x04, 0x02, 0x05, 0x02,
				0x06, 0x02, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17,
				0x00, 0x00, 0x00, 0x2b, 0x00, 0x09, 0x08, 0x7f,
				0x14, 0x03, 0x03, 0x03, 0x02, 0x03, 0x01, 0x00,
				0x2d, 0x00, 0x03, 0x02, 0x01, 0x00, 0x00, 0x28,
				0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20,
				0x13, 0x7c, 0x6e, 0x97, 0xc4, 0xfd, 0x09, 0x2e,
				0x70, 0x2f, 0x73, 0x5a, 0x9b, 0x57, 0x4d, 0x5f,
				0x2b, 0x73, 0x2c, 0xa5, 0x4a, 0x98, 0x40, 0x3d,
				0x75, 0x6e, 0xb4, 0x76, 0xf9, 0x48, 0x8f, 0x36,
			},
			domain: "10.42.0.243",
			err:    false,
		},
	}

	for _, test := range cases {
		header, err := SniffTLS(test.input)
		if test.err {
			if err == nil {
				t.Errorf("Exepct error but nil in test %v", test)
			}
		} else {
			if err != nil {
				t.Errorf("Expect no error but actually %s in test %v", err.Error(), test)
			}
			if header.Domain() != test.domain {
				t.Error("expect domain ", test.domain, " but got ", header.Domain())
			}
		}
	}
}

func TestSniffTLSRecordFragmentation(t *testing.T) {
	pkt, err := hex.DecodeString(
		"160301015e010007cf030387948e348724d19b1f785da031edc3e860a7c99cf77e8600c027bb34362c4e322091244f13182b84c3bd9525577c7cef87372ff5922aa40d94ffa557284f0e0c4e0020caca130113021303c02bc02fc02cc030cca9cca8c013c014009c009d002f0035010007664a4a0000000a000c000ababa11ec001d00170018002d0002010100230000002b000706eaea03040303000b0002010000120000fe0d00ba000001000132002063fe7acd9f1acccb5cf543dd024230584200aacc5cc6b649ea6c5590237fcc080090decc4b225c4ae5a808c29d694ededab68dae188a0ca15127b9716bba0cf69f6ea7802987ee0e47c361be4b699343584c343735b759c28f6bf994f06eca2716dae049d065439b7a1d11f27eda546eaeed770af91d6d9e07bb5e1530b7399f404ecfb7838d9cef03056f1b1c7d7e7c1e962648e6f1c86460003999eda42c26641c74ba79d46b372d63e081e2fbccecab08" +
			"160301015e001b0003020002003304ef04edbaba00010011ec04c0804b9305a03c9e003c2d279a8c76c9f3e017c7e8386786b4a7920b07fb5c42e57134106324a27d157c8b90960519abb3746c1fd7a81030b4c801289dbc495d47109808673a07730268f6b71fb4c43d8acc8a8989391472d38b4d3525798e3a24869a1ee6d8c86f9635e3bc839fab33b5f3c42eaa6fc6a32584a7976d657dfc298bcc88763c61b5b599bd2d3415f634649c8552bdb581bc754e88883625b29282dab5f3961e84628c9a91001f415e002289cec224107a13c121860c63463a69bc03f056b9b89a06f29266324fb6c719eb7b3abc1b103285ba5aa3703cd03ea9198a6055bdc90c6139d29ff9293a5577a59eb43acaa2238f8a591ea95847bc9586c55400bc4b272ab38d462fe427af733a6885dc77a2d182b86c4063aa16aef196f1e773374577a1876115897cf2c4b1042784ef260086e5a197e3ab344a501f7026278048d63b0c03" +
			"160301015eb6233195467c0066cac86248fabda4043f32c50645795f6ac38575b0352bb3151fa9a653f7220e5c719cf5c7be07aec33503ee86a3855215b5baa30e104bb9b537532acb0b80027cd7476efb18bacb3adc98b16d4b613a3a23ba38a9c82c7aa487721a1579c030b73443c72c8922828c3e5ac63d552997fff55620460642eb59dbe704c4e7bd40063587a29d72c45b9646bf1fb41b5d78646564bc992b1e4d788b3f33ada1f32e514c38f3324aa2519ab485b4f3b96ef306cd81a439075a41d4f3a23b0aa453d3c005854417e48305f2716412cfb1711e649a4795450148e615acfb0815f3560043255514bada1808724309d3aaa1e68bb28a38c925e4bf54eb77f189004d36560c1310481652b433a412d76db31731a1271b58c3809522bd176b4f31f29db67b0af84aa8ebc895062ba9ed822974574f8324595eab6c3c857327427345561151817e0e38ce37025f3105209b566b45f6c44f300a577b84" +
			"160301015e77249a31fb588bebcc9f07c7bdbb5975780cebb2775c387cf24bb9fc407176717bd38c8d71bb821ef59ca29a880bc43732e320b5a0174c777626548ee640919c3c7c518cb92c56945160cb0e34620640650479327453543743a6b5539f4da02629666a5e0a5cb3624670ca81400581ef14bc2765aa7f462c6f700b85132c14e06cb24295dd72001d071904261786ab099a489221e7bbc81071c34945e846882d5067c1c27df9660673696fb628a57d6a9f09a196acb196af107f91c916589395757993c684553640a5ce3a45770aae977649f017210cd497553856add5789fd29180b336207c70aaa6c74b87c64397072af81f6bdbbb01725e8d48b045910fc5bac1144226e5d74a8509787103ba61b521f6d13dc703588ed8a68d682b88d3275e587f4e7c8071b162e4f331ec81110cb2979fb228b14c3db0451fbc288feba7bb41374c83554608e53b4bb8b508a58814e416f8b57e1e71c345cc851e36" +
			"160301015eb444a7828c0b7a545a9b58a62cf97697973748ea4406ea5b7ff7260552162099da2dd7735642d04e7bf8bd0b87a8f8bb72acfb1a695cbb83ab513a068f6e7408cf5726b95635cf14520bb97993b23da2f8374495acda316ac1f5799af2bcebbc5592c69b48f08ce8a97ed32287d5763284131a83ba8a780cbf95c6c1c2f50732d15eb6d8ca1319bf4ad58c3452b4f6686df8a52f56dde82777bd02c93737b9afa10266d0d81c5abf4835b0f8f209f5be22f0bf9c1579f2a6677dc95e001d002091d1d7c7eb4cba1465f64bf4e380823ff2a163caedfbdd11a74d2b45cdf1bc6000000010000e00000b6578616d706c652e636f6d00170000ff010001000010000e000c02683208687474702f312e31000d001200100403080404010503080505010806060100050005010000000044cd000500030268327a7a0001000029011b00e600e000020dff9ee9d627573a04683b40000366f31bcf8c539beb2455" +
			"16030100fd6b484cc4a9adf49be379d93c9fdc3063d085fc080b897b9208c4c2d22a013e68678a3243640212f09623b54be186e44dd3a2556a5ea0ba2eb6025e10a5dd86e6217df60546edd26068eeb1c94585f7e2306e9766cac702bad7da8f5108ef4cc0d1c6756e754b74a9f1cebb9d5f40b03a5f79fe81b566dcf65b387e6a88720e46f2cb5d03a81acc4bcbbd3b4784201a22aaca2ef8210b601c4cbee25b13183eebbbff0cc9db12284396cc7aee27997d5f595794a94170652153b68b3aa5c4b42955d8434a08234ba0bd55003130c8e525eb2f72d126d0bba2df02337c4b452a2667f008ab777728b789458d6b7e0b70447a961b7c237f62ecf26495a979")
	common.Must(err)
	hdr, err := SniffTLS(pkt)
	if err != nil || hdr.Domain() != "example.com" {
		t.Error("failed")
	}
}
